name: CI Pipeline for DVNA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - ${{ vars.POSTGRES_PORT }}:${{ vars.POSTGRES_PORT }}
        options: >-
          --health-cmd="pg_isready" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '8.12.0'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: npm install

       # Étape 4 : Installer wait-on pour attendre que l'application soit prête
      - name: Install wait-on
        run: npm install -g wait-on

      # Étape 5 : Attendre que PostgreSQL soit disponible
      - name: Wait for PostgreSQL
        run: |
            while ! pg_isready -h "${{ vars.POSTGRES_HOST }}" -p ${{ vars.POSTGRES_PORT }} -U ${{ secrets.POSTGRES_USER }}; do
              echo "Waiting for PostgreSQL...";
              sleep 5;
            done

      # Étape 6 : Démarrer l'application en arrière-plan
      - name: Start the application
        env:
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: npm start &
      

     
      # Étape 7 : Lancer le scan OWASP ZAP et générer un rapport JSON dans /zap/wrk/
      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          token: ${{ secrets.TOKEN_DVNA }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://127.0.0.1:9090'
          artifact_name: "ZapAnalysis"

      # # Étape 8 : Commiter et pousser le rapport dans docs/zap/
      # - name: Commit and Push ZAP Report
      #   run: |
      #     git add docs/zap/zap-report-*.json
      #     git commit -m "Add ZAP report"
      #     git push origin main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  codeql_scan:
    name: CodeQL Security Analysis
    needs: security_scan
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Initialiser CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'

      # Étape 3 : Exécuter l'analyse CodeQL et générer le rapport dans 'docs/CodeQL'
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: 'docs/CodeQL/codeql-report.sarif'


      # Étape 4 : Commiter et pousser le rapport dans docs/CodeQL/
      - name: Commit and Push CodeQL Report
        run: |
          git add docs/CodeQL/codeql-report-$(date +'%Y%m%d%H%M%S').sarif
          git commit -m "Add CodeQL report"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
