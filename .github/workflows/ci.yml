name: CI Pipeline for DVNA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: dvna
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: dvna
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U dvna"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Installer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '8.12.0'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: npm install

      # Étape 4 : Installer wait-on pour attendre que l'application soit prête
      - name: Install wait-on
        run: npm install -g wait-on

      # Étape 5 : Attendre que POSTGRES soit disponible
      - name: Wait for POSTGRES
        run: |
            while ! pg_isready ping -h"127.0.0.1" -p 5432 -U dvna ; do
              echo "Waiting for PostgreSQL...";
              sleep 5;
            done


      # Étape 6 : Démarrer l'application en arrière-plan
      - name: Start the application
        env:
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          POSTGRES_USER: dvna
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: dvna
    run: npm start &

      # Étape 7 : Attendre que l'application soit disponible sur le port 9090
      # - name: Wait for the application to start
      #   run: wait-on http://localhost:9090

      # Étape 8 : Lancer le scan OWASP ZAP
      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          token: ${{ secrets.TOKEN_DVNA}}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://127.0.0.1:9090'
